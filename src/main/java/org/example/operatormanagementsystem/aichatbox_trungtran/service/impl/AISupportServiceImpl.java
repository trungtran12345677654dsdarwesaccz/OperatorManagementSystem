    package org.example.operatormanagementsystem.aichatbox_trungtran.service.impl;

    import lombok.RequiredArgsConstructor;
    import org.example.operatormanagementsystem.ManageHungBranch.repository.PaymentRepository;
    import org.example.operatormanagementsystem.aichatbox_trungtran.dto.request.AnswerRequest;
    import org.example.operatormanagementsystem.aichatbox_trungtran.dto.request.GeminiRequest;
    import org.example.operatormanagementsystem.aichatbox_trungtran.dto.response.GeminiResponse;
    import org.example.operatormanagementsystem.aichatbox_trungtran.service.AISupportService;
    import org.example.operatormanagementsystem.config.JwtUtil;
    import org.example.operatormanagementsystem.customer_thai.repository.BookingCustomerRepository;
    import org.example.operatormanagementsystem.entity.Booking;
    import org.example.operatormanagementsystem.entity.Payment;
    import org.example.operatormanagementsystem.listProfileTrungTran.dto.response.ViewProfileResponse;
    import org.example.operatormanagementsystem.listProfileTrungTran.service.ViewProfileService;
    import org.springframework.beans.factory.annotation.Value;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;
    import org.springframework.web.client.RestTemplate;
    import jakarta.servlet.http.HttpServletRequest;

    import java.util.Arrays;
    import java.util.Collections;
    import java.util.List;
    import java.util.Optional;

    @Service
    @RequiredArgsConstructor
    public class AISupportServiceImpl implements AISupportService {

        private final PaymentRepository paymentRepository;
        private final BookingCustomerRepository bookingRepository;
        private final ViewProfileService viewProfileService;
        private final RestTemplate restTemplate;
        private final JwtUtil jwtUtil;
        private final HttpServletRequest request;

        private final String GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/";
        private static final String DEFAULT_GEMINI_MODEL = "gemini-2.0-flash";

        @Value("${gemini.api.key}")
        private String apiKey;

        @Override
        public String answerFromGemini(AnswerRequest answerRequest) {
            String question = answerRequest.getQuestion();

            if (isInappropriateQuestion(question)) {
                return "‚ùó T√¥i kh√¥ng th·ªÉ h·ªó tr·ª£ y√™u c·∫ßu n√†y. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi li√™n quan ƒë·∫øn d·ªãch v·ª• chuy·ªÉn nh√† ho·∫∑c th√¥ng tin ƒë∆°n h√†ng.";
            }

            if (isBookingStatusQuestion(question)) {
                return generateBookingStatusReply();
            }

            if (isPaymentHistoryQuestion(question)) {
                return generatePaymentHistoryReply();
            }


            String fallbackPrompt = String.format("""
                    B·∫°n l√† m·ªôt nh√¢n vi√™n t∆∞ v·∫•n AI ƒëang l√†m vi·ªác trong h·ªá th·ªëng ƒë·∫∑t xe chuy·ªÉn nh√† t·∫°i Vi·ªát Nam. 
                     Kh√°ch h√†ng v·ª´a h·ªèi: "%s"
                     H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, chuy√™n nghi·ªáp v√† ƒë√∫ng tr·ªçng t√¢m. 
                     G·ª£i √Ω kh√°ch s·ª≠ d·ª•ng d·ªãch v·ª• m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán. 
                     N·∫øu c√≥ th·ªÉ, h√£y gi·ªõi thi·ªáu c√°c ƒëi·ªÉm n·ªïi b·∫≠t nh∆∞:
                     - H·ªó tr·ª£ chuy·ªÉn ƒëi·ªÅu h√≤a, t·ªß l·∫°nh, m√°y gi·∫∑t, ƒë·ªì d·ªÖ v·ª°...
                     - C√≥ nh√¢n vi√™n b·ªçc l√≥t, th√°o l·∫Øp v√† s·∫Øp x·∫øp ƒë·ªì t·∫°i ch·ªó.
                     - Theo d√µi ƒë∆°n h√†ng, t√†i x·∫ø, chi ph√≠ r√µ r√†ng qua app.
                     - ƒê·ªôi ng≈© t√†i x·∫ø chuy√™n nghi·ªáp, ph·ª•c v·ª• t·∫≠n t√¨nh, ƒë√∫ng gi·ªù.
                     - D·ªãch v·ª• c√≥ m·∫∑t t·∫°i nhi·ªÅu t·ªânh th√†nh, h·ªó tr·ª£ nhanh ch√≥ng.
                    
                     M·ª•c ti√™u l√† l√†m kh√°ch h√†ng c·∫£m th·∫•y y√™n t√¢m v√† h√†i l√≤ng khi s·ª≠ d·ª•ng d·ªãch v·ª• chuy·ªÉn nh√† c·ªßa h·ªá th·ªëng.
            """, question);

            String result = queryGemini(fallbackPrompt);

            if (result == null || result.trim().isEmpty()
                    || result.toLowerCase().contains("i'm not sure")
                    || result.toLowerCase().contains("i cannot")
                    || result.toLowerCase().contains("i don‚Äôt know")
                    || result.toLowerCase().contains("i do not know")) {
                return "‚ùó C√¢u h·ªèi c·ªßa b·∫°n hi·ªán kh√¥ng n·∫±m trong ph·∫°m vi c√¥ng vi·ªác c·ªßa t√¥i. C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t c√¢u h·ªèi, ch√∫ng t√¥i s·∫Ω c·∫£i thi·ªán h·ªá th·ªëng ƒë·ªÉ ph·ª•c v·ª• b·∫°n t·ªët h∆°n.";
            }

            return result;
        }

        private String generatePaymentHistoryReply() {
            String email = getCurrentCustomerEmailFromToken();
            List<Payment> payments = paymentRepository.findTop3ByBooking_Customer_Users_EmailOrderByPaidDateDesc(email);
            if (payments.isEmpty()) {
                return "B·∫°n ch∆∞a c√≥ thanh to√°n n√†o ƒë∆∞·ª£c ghi nh·∫≠n.";
            }
            StringBuilder sb = new StringBuilder("üí≥ L·ªãch s·ª≠ thanh to√°n g·∫ßn nh·∫•t:\n");
            for (Payment p : payments) {
                sb.append("- Ng√†y: ").append(p.getPaidDate())
                        .append(" | S·ªë ti·ªÅn: ").append(p.getAmount()).append(" VNƒê")
                        .append(" | Tr·∫°ng th√°i: ").append(p.getBooking().getPaymentStatus()
                        )
                        .append("\n");
            }
            return sb.toString();
        }

        private String generateBookingStatusReply() {
            String email = getCurrentCustomerEmailFromToken();
            Optional<Booking> latestBookingOpt = bookingRepository.findTopByCustomer_Users_EmailOrderByCreatedAtDesc(email).stream().findFirst();
            if (latestBookingOpt.isEmpty()) {
                return "Hi·ªán t·∫°i b·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.";
            }
            Booking booking = latestBookingOpt.get();
            StringBuilder sb = new StringBuilder("üì¶ Th√¥ng tin ƒë∆°n h√†ng g·∫ßn nh·∫•t c·ªßa b·∫°n:\n");
            sb.append("- M√£ ƒë∆°n h√†ng: ").append(booking.getBookingId()).append("\n")
                    .append("- Tr·∫°ng th√°i: ").append(booking.getStatus()).append("\n")
                    .append("- Ng√†y t·∫°o: ").append(booking.getCreatedAt()).append("\n")
                    .append("- N∆°i l·∫•y h√†ng: ").append(booking.getPickupLocation()).append("\n")
                    .append("- N∆°i giao h√†ng: ").append(booking.getDeliveryLocation()).append("\n")
                    .append("- T·ªïng chi ph√≠: ").append(booking.getTotal()).append(" VNƒê");
            return sb.toString();
        }


        private String queryGemini(String prompt) {
            GeminiRequest.Part part = new GeminiRequest.Part(prompt);
            GeminiRequest.Content content = new GeminiRequest.Content(Collections.singletonList(part));
            GeminiRequest requestBody = new GeminiRequest(Collections.singletonList(content));
            String url = GEMINI_URL + DEFAULT_GEMINI_MODEL + ":generateContent?key=" + apiKey;

            int maxAttempts = 3;

            for (int attempt = 1; attempt <= maxAttempts; attempt++) {
                try {
                    GeminiResponse response = restTemplate.postForObject(url, requestBody, GeminiResponse.class);

                    if (response != null && response.getCandidates() != null && !response.getCandidates().isEmpty()) {
                        GeminiResponse.Content contentRes = response.getCandidates().get(0).getContent();
                        if (contentRes != null && contentRes.getParts() != null && !contentRes.getParts().isEmpty()) {
                            return contentRes.getParts().get(0).getText();
                        }
                    }

                    return "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng AI. Vui l√≤ng th·ª≠ l·∫°i sau.";
                } catch (Exception e) {
                    String errorMsg = e.getMessage() != null ? e.getMessage() : "";

                    // N·∫øu l·ªói do qu√° t·∫£i (503), th·ª≠ l·∫°i sau th·ªùi gian ch·ªù
                    if (errorMsg.contains("503") && attempt < maxAttempts) {
                        try {
                            Thread.sleep(2000L * attempt); // 2s, 4s, 6s
                        } catch (InterruptedException ignored) {}
                    } else {
                        // N·∫øu kh√¥ng ph·∫£i l·ªói qu√° t·∫£i ho·∫∑c ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠
                        return "üöß H·ªá th·ªëng AI hi·ªán ƒëang qu√° t·∫£i ho·∫∑c g·∫∑p l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.";
                    }
                }
            }

            return "üöß H·ªá th·ªëng AI hi·ªán ƒëang qu√° t·∫£i. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c l√†m m·ªõi trang.";
        }


        private boolean isBookingStatusQuestion(String question) {
            String lower = question.toLowerCase();
            return lower.contains("ƒë∆°n h√†ng") || lower.contains("tr·∫°ng th√°i") ||
                    lower.contains("chuy·ªÉn nh√†") || lower.contains("ƒë·∫∑t xe") ||
                    lower.contains("t√†i x·∫ø") || lower.contains("giao h√†ng");
        }

        private boolean isPaymentHistoryQuestion(String question) {
            String lower = question.toLowerCase();
            return lower.contains("l·ªãch s·ª≠ thanh to√°n")
                    || lower.contains("thanh to√°n g·∫ßn nh·∫•t")
                    || lower.contains("ƒë√£ tr·∫£ ti·ªÅn ch∆∞a")
                    || lower.contains("giao d·ªãch")
                    || lower.contains("ƒë√£ tr·∫£ ch∆∞a");
        }

        private boolean isProfileInfoQuestion(String question) {
            String lower = question.toLowerCase();
            return lower.contains("th√¥ng tin c√° nh√¢n") || lower.contains("h·ªì s∆°") || lower.contains("profile")
                    || lower.contains("email") || lower.contains("s·ªë ƒëi·ªán tho·∫°i") || lower.contains("ƒë·ªãa ch·ªâ");
        }

        private boolean isChangePasswordRequestQuestion(String question) {
            String lower = question.toLowerCase();
            return lower.contains("ƒë·ªïi m·∫≠t kh·∫©u") || lower.contains("thay ƒë·ªïi m·∫≠t kh·∫©u") || lower.contains("reset password");
        }

        private String getCurrentCustomerEmailFromToken() {
            String token = jwtUtil.resolveToken(request);
            if (token != null && jwtUtil.validateToken(token)) {
                return jwtUtil.extractUsername(token);
            }
            return null;
        }
        private static final String[] BLACKLIST_KEYWORDS = {
                "ti·ªÅn", "vay", "cho m∆∞·ª£n", "chuy·ªÉn kho·∫£n", "momo", "mbbank", "vietcombank",
                "y√™u", "crush", "b·∫°n trai", "t√¨nh c·∫£m", "th·∫•t t√¨nh", "c√¥ ƒë∆°n",
                "phim", "ca sƒ©", "idol", "nh·∫°c", "t·∫•u h√†i", "TikTok",
                "tr·ªùi m∆∞a", "n·∫Øng", "l·∫°nh", "nhi·ªát ƒë·ªô", "th·ªùi ti·∫øt",
                "ƒëmm", "vcl", "ngu", "ch·ª≠i", "t·ª•c", "ƒë·ªãt", "lol", "c√∫t", "ƒÉn", "u·ªëng", "th√≠ch", "ng·ªß"
        };

        private boolean isInappropriateQuestion(String question) {
            String lower = question.toLowerCase();
            return Arrays.stream(BLACKLIST_KEYWORDS).anyMatch(lower::contains);
        }



    }
